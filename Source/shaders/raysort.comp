#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#include "structures.glsl"

layout(binding = 0) uniform Constants {
    mat4 viewMtx;
    mat4 projMtx;
    mat4 viewInvMtx;
    mat4 projInvMtx;
    vec2 viewportSize;
    vec2 viewportBase;
    uint numLights;
    uint numTriangles;
    uint frameIndex;
    uint numRays;
    uint numBVHNodes;
};

layout(std430, binding = 9) buffer stackBuffer
{
    RayStackBuffer stack[];
};

layout(std430, binding = 10) buffer jobBuffer
{
    JobDesc jobGrid[];
};

shared uint count;

void main()
{
    count = 0;

    uint gridIndex = gl_GlobalInvocationID.y * uint(viewportSize.x) + gl_GlobalInvocationID.x;
    uint localIndex = gl_LocalInvocationIndex;

    uint baseIndex = gl_WorkGroupID.y * uint(viewportSize.x) + gl_WorkGroupID.x * gl_WorkGroupSize.x;

    uint newIndex = 0xFFFFFFFF;

    JobDesc job = jobGrid[gridIndex];
    
    if (job.index != 0xFFFFFFFF)
    {
        newIndex = atomicAdd(count, 1);
    }

    groupMemoryBarrier();

    jobGrid[gridIndex].index = 0xFFFFFFFF;

    groupMemoryBarrier();

    if (newIndex != 0xFFFFFFFF) jobGrid[baseIndex + newIndex] = job;
}
