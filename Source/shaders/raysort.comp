#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#include "structures.glsl"

layout(std430, binding = 9) buffer stackBuffer
{
    RayStackBuffer stack[];
};

layout(std430, binding = 10) buffer jobBuffer
{
    JobDesc jobGrid[];
};

shared uint lCount;
shared uint rCount;

void main()
{
    lCount = 0;
    rCount = 0;

    barrier();

    if (gl_GlobalInvocationID.x > uint(viewportSize.x)) return;

    uint gridIndex = gl_GlobalInvocationID.y * uint(viewportSize.x) + gl_GlobalInvocationID.x;
    uint localIndex = gl_LocalInvocationIndex;

    uint baseIndex = gl_WorkGroupID.y * uint(viewportSize.x) + gl_WorkGroupID.x * gl_WorkGroupSize.x;
    uint maxIndex = min(baseIndex + gl_WorkGroupSize.x, gl_WorkGroupID.y * uint(viewportSize.x) + uint(viewportSize.x));

    uint newIndex = 0xFFFFFFFF;

    JobDesc job = jobGrid[gridIndex];
    
    if (job.index != 0xFFFFFFFF)
    {
        newIndex = baseIndex + atomicAdd(lCount, 1);
    }

    barrier();
    groupMemoryBarrier();

    jobGrid[gridIndex].index = 0xFFFFFFFF;

    groupMemoryBarrier();

    if (newIndex != 0xFFFFFFFF) jobGrid[newIndex] = job;
}
