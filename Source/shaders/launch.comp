#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "noise.glsl"
#include "structures.glsl"

layout(std430, binding = 4) buffer blueNoiseBuffer
{
    uint16_t blueNoise[];
};

layout(std430, binding = 9) buffer stackBuffer
{
    RayStackBuffer stack[];
};

layout(std430, binding = 10) buffer jobBuffer
{
    JobDesc jobGrid[];
};

layout(binding = 6, rgba32f) uniform image2D accumulation;

void main()
{
    uvec2 launchIndex = gl_GlobalInvocationID.xy + uvec2(viewportBase);
    if (launchIndex.x >= viewportSize.x || launchIndex.y >= viewportSize.y) return;
    uint jitter = (blueNoise[(launchIndex.x & 0xFF) + ((launchIndex.y & 0xFF) << 8)] * 256 + blueNoise[frameIndex]);
    
    vec4 projPos = vec4(((vec2(launchIndex) + WeylNth(jitter)) / viewportSize) * 2.0 - 1.0, 1.0, 1.0);
    vec4 viewPos = projInvMtx * projPos; viewPos /= viewPos.w;
    vec3 worldPos = (viewInvMtx * viewPos).xyz;

    vec4 camPos = viewInvMtx * vec4(0.0, 0.0, 0.0, 1.0); camPos /= camPos.w;

    uint jobIndex = launchIndex.y * uint(viewportSize.x) + launchIndex.x;
    uint stackIndex = jobIndex * numRays;

    stack[stackIndex].prob = 0.0hf;
    stack[stackIndex].rayOrigin = camPos.xyz;
    stack[stackIndex].rayDirection = normalize(worldPos - camPos.xyz);
    stack[stackIndex].currentDepth = 0;
    jobGrid[jobIndex].index = stackIndex;

    if (imageLoad(accumulation, ivec2(launchIndex)).a < 0.5)
        stack[stackIndex].randState = jitter;
}
